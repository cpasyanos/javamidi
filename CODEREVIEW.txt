Upon reading through the code, we noticed that there is a lot of code duplication. In MusicModel1 (the implementation of their interface MusicModel was needed to make the provided code compile) the code instantiates an object of the class purely to run a function. MusicModel1 had a second convenience constructor that allowed for the client to make a completely useless and empty object of that class, just so they could use the method. It seems like it would be more efficient to simply make the function static to allow clients to run it without instantiating the class, and the second constructor could be removed entirely. 

Another place where there was a lot of code duplication was the views. For example we noticed that rather than having the composite view use the GUI and MIDI views that our providers had already made, they instead copied the code from each to replicate the functionality in a combined view. The providers also had duplicate code in the textual view -- this code already existed within the model but they copied and pasted into the view instead of calling the already existing model method.

Something that would greatly improve the useability of the code is updates to the JavaDoc. The JavaDoc in the code could use some degree of improvement as there were some variables that were difficult, if not impossible to glean the purpose of. A lot of it only listed what type the parameter should be, not what it actually represented, which made it really hard for us to match up the information in our two models because we didn't know what a parameter or field was. For example, it was incredibly unclear what the Volume field was used for in the model implementation because it was used in a different context in the midi view and the model was unclear. 
	